package com.atypon.authentication.serucity.jwt;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;
import lombok.RequiredArgsConstructor;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Service;

import java.security.Key;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;


@Service
public class JwtService {

    private static final String SECRET = "ed33f0c5b39893b13ff5d4442298c50549c938dea0fc700c2552a78dd4248cbaed900cf03e31b1d561ef6abbf7c8418402c4633342da144191271b2d4fb007812c220f06ea8dda2f5dcf028775a1664c36778e43242a25956462fdf2fc0c760c4fda857c24f1ae0952ba3efc629ecb0414f7a87c3e358f49f91a1cdb0d81ff911c4865c97a7b2981538fae630d071b984ab44ea7fcf86fa4f93ec8cb1be53e963d600d881e0f2e32b361145ac35d81c69945d4baacf1f1260a3fa4c31dc13bd4c99cd96b5fc1f074168899b097e4e9874bfb9d32cd316f76a03d2ad00cfbab6044f9869cd325ae048a97011fecb72465211bb6281929133dd70cf35b608f0f53";

    public String generateToken(UserDetails userDetails) {
        Map<String, Object> claims = new HashMap<>();
        return generateToken(claims, userDetails);
    }

    public boolean isTokenExpired(String token) {
        return extractExpDate(token).before(new Date());
    }

    private Date extractExpDate(String token) {
        return extractClaim(token, Claims::getExpiration);
    }

    public boolean isTokenValid(String token, UserDetails userDetails) {
        String username = extractUsername(token);
        return username.equals(userDetails.getUsername());
    }
    public String extractUsername(String token) {
        return extractClaim(token, Claims::getSubject);
    }

    public <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
        final Claims claims = extractClaims(token);
        return claimsResolver.apply(claims);
    }

    public Long extractIdToken(String token) {
        return extractClaim(token, claims -> claims.get("id", Long.class));
    }

    private Claims extractClaims(String token) {
        return Jwts.parserBuilder()
                .setSigningKey(getSignInKey())
                .build()
                .parseClaimsJws(token)
                .getBody();
    }
    private Key getSignInKey(){
        byte[] keyBytes = Decoders.BASE64.decode(SECRET);
        return Keys.hmacShaKeyFor(keyBytes);
    }



    public String generateToken(
            Map<String, Object> extraClaims,
            UserDetails userDetails
    ) {
        return Jwts.builder()
                .setClaims(extraClaims)
                .setSubject(userDetails.getUsername())
                .setIssuedAt(new Date(System.currentTimeMillis()))
                .setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 24))
                .signWith(getSignInKey(), SignatureAlgorithm.HS256)
                .compact();
    }
}
package com.atypon.authentication.serucity.jwt;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.NonNull;
import lombok.RequiredArgsConstructor;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.web.authentication.WebAuthenticationDetails;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;
import org.springframework.web.filter.OncePerRequestFilter;
import com.atypon.authentication.serucity.jwt.JwtService;
import java.io.IOException;



@Component
@RequiredArgsConstructor
public class JwtAuthFilter extends OncePerRequestFilter {

    private final JwtService jwtService;
    private final UserDetailsService userDetailsService;

//    public JwtAuthFilter(JwtService jwtService, UserDetailsService userDetailsService) {
//        this.jwtService = jwtService;
//        this.userDetailsService = userDetailsService;
//
//    }
    @Override
    protected void doFilterInternal(
            @NonNull HttpServletRequest request,
            @NonNull HttpServletResponse response,
            @NonNull FilterChain filterChain) throws ServletException, IOException {

        final String authorizationHeader = request.getHeader("Authorization");
        final String jwt;
        if (authorizationHeader == null || !authorizationHeader.startsWith("Bearer ")) {
            filterChain.doFilter(request, response);
            return;
        }

        jwt = authorizationHeader.substring(7);
        String username = jwtService.extractUsername(jwt);
        Long userId = jwtService.extractIdToken(jwt);
        if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {
            UserDetails userDetails = this.userDetailsService.loadUserByUsername(username);
            if (jwtService.isTokenValid(jwt,userDetails) && !jwtService.isTokenExpired(jwt)) {
                UsernamePasswordAuthenticationToken authToken =
                        new UsernamePasswordAuthenticationToken(
                                userDetails,
                                userId,
                                userDetails.getAuthorities()
                        );
                authToken.setDetails(
                        new WebAuthenticationDetails(request)
                );
                SecurityContextHolder.getContext().setAuthentication(authToken);


            }
            filterChain.doFilter(request, response);
        }


    }
}
//package com.example.demo.serucity.oauth;
package com.atypon.authentication.serucity.oauth;
import com.atypon.authentication.models.User;
import org.springframework.security.oauth2.core.user.OAuth2User;

import java.util.stream.Stream;

public class GithubStrategy implements LoginStrategy{
    @Override
    public User setInfo(User user, OAuth2User oauth2User) {

        String login = oauth2User.getAttribute("login");
        String fullName = oauth2User.getAttribute("name");

        if (Stream.of(login, fullName).anyMatch(s -> s == null || s.trim().isEmpty())) {
            throw new IllegalArgumentException("Not valid credentials for Google OAuth");
        }
        String email = login + "@github.com";

        user.setEmail(email);
        user.setUserIdentifier(login);
        user.setFirstName(fullName);
        user.setLastName(fullName);
        user.setPassword("Github");

        return user;
    }
}
//package com.example.demo.serucity.oauth;
package com.atypon.authentication.serucity.oauth;
import com.atypon.authentication.models.User;
import org.springframework.security.oauth2.core.user.OAuth2User;

import java.util.stream.Stream;

public class GoogleStrategy implements LoginStrategy{

    @Override
    public User setInfo(User user, OAuth2User oauth2User) {
        String firstName = oauth2User.getAttribute("given_name");
        String lastName = oauth2User.getAttribute("family_name");
        String email = oauth2User.getAttribute("email");
        if (Stream.of(firstName, lastName, email).anyMatch(s -> s == null || s.trim().isEmpty())) {
            throw new IllegalArgumentException("Not valid credentials for Google OAuth");
        }

        String identity = email.substring(0, email.indexOf("@"));
        user.setFirstName(firstName);
        user.setLastName(lastName);
        user.setEmail(email);
        user.setUserIdentifier(identity);
        user.setPassword("Google");
        return user;
    }
}
//package com.example.demo.serucity.oauth;
package com.atypon.authentication.serucity.oauth;

import com.atypon.authentication.models.User;
import com.atypon.authentication.serucity.jwt.JwtService;
import com.atypon.authentication.service.UserService;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;

import org.springframework.security.core.Authentication;
import org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken;
import org.springframework.security.oauth2.core.user.OAuth2User;
import org.springframework.security.web.authentication.AuthenticationSuccessHandler;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.rmi.ServerException;
import java.util.HashMap;
import java.util.Map;



@Component
@RequiredArgsConstructor
public class OAuth2SuccessHandler implements AuthenticationSuccessHandler {
    private final JwtService jwtService;
    private final UserService userService;

    @Override
    public void onAuthenticationSuccess(HttpServletRequest request,
                                   HttpServletResponse response,
                                   Authentication authentication) throws IOException {

        OAuth2AuthenticationToken oAuth2Token = getOAuth2Token(authentication);
        OAuth2User oAuth2User = (OAuth2User) authentication.getPrincipal();

        LoginStrategy loginStrategy = determineStrategy(oAuth2Token.getAuthorizedClientRegistrationId());
        User user = loginStrategy.setInfo(new User(), oAuth2User);

        registerUserIfNotExists(user);
        User userWithId = fetchUserFromDatabase(user.getEmail());

        String token = generateJwtToken(userWithId);
        redirectToClientWithToken(response, token);
    }

    private LoginStrategy determineStrategy(String registrationId) {
        if (registrationId.equalsIgnoreCase("google")) {
            return new GoogleStrategy();
        } else if (registrationId.equalsIgnoreCase("github")) {
            return new GithubStrategy();
        }
        throw new IllegalStateException("Oauth Strategy not provided: " + registrationId);
    }

    private OAuth2AuthenticationToken getOAuth2Token(Authentication authentication) {
        if (!(authentication instanceof OAuth2AuthenticationToken token)) {
            throw new IllegalStateException("Unexpected authentication type: " + authentication);
        }
        return token;
    }

    private void registerUserIfNotExists(User user) {
        if (!userService.findByIdentifier(user.getEmail())) {
            userService.save(user);
        }
    }

    private User fetchUserFromDatabase(String email) throws ServerException {
        return userService.findByEmail(email)
                .orElseThrow(() -> new ServerException("didn't stored in the database"));
    }

    private String generateJwtToken(User user) {
        Map<String, Object> claims = new HashMap<>();
        claims.put("id", user.getId());
        return jwtService.generateToken(claims, user);
    }

    private void redirectToClientWithToken(HttpServletResponse response, String token) throws IOException {
        String redirectUrl = "http://localhost:3000/home?token=" + URLEncoder.encode(token, StandardCharsets.UTF_8);
        response.sendRedirect(redirectUrl);
    }

}
//package com.example.demo.serucity.oauth;
package com.atypon.authentication.serucity.oauth;

import com.atypon.authentication.models.User;
import org.springframework.security.oauth2.core.user.OAuth2User;

public interface LoginStrategy {
    User setInfo(User user , OAuth2User oauth2User);
}
package com.atypon.authentication.serucity.config;

import com.atypon.authentication.serucity.jwt.JwtAuthFilter;
import com.atypon.authentication.serucity.oauth.OAuth2SuccessHandler;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

@EnableWebSecurity
@Configuration
@EnableMethodSecurity
public class SecurityConfig {

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http,
                                                   JwtAuthFilter jwtAuthFilter ,
                                                   OAuth2SuccessHandler auth2SuccessHandler ) throws Exception {

        http
                .csrf(AbstractHttpConfigurer::disable)
                .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
                .authorizeHttpRequests(auth ->  auth
                        .requestMatchers("/api/auth/**", "/api/jwt/**")
                                .permitAll()
                        .anyRequest().authenticated()
                )
                .oauth2Login(oauth ->
                        oauth.successHandler(auth2SuccessHandler))
                .addFilterBefore(jwtAuthFilter, UsernamePasswordAuthenticationFilter.class)
//                .cors(cors->{})
        ;

        return http.build();
    }
}
//package com.example.demo.serucity.config;

package com.atypon.authentication.serucity.config;

import com.atypon.authentication.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@Configuration
@RequiredArgsConstructor
public class AppConfig {


    private final UserRepository userRepo;


    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration authenticationConfiguration) throws Exception {
        return authenticationConfiguration.getAuthenticationManager();
    }
    @Bean
    public AuthenticationProvider authenticationProvider() {
        DaoAuthenticationProvider daoAuthenticationProvider = new DaoAuthenticationProvider();
        daoAuthenticationProvider.setUserDetailsService(userDetailsService());
        daoAuthenticationProvider.setPasswordEncoder(passwordEncoder());
        return daoAuthenticationProvider;
    }


    @Bean
    public UserDetailsService userDetailsService() {
        return email -> {
            System.out.println("Looking for user with email: " + email);

            return userRepo.findByEmail(email)
                    .map(user -> {
                        System.out.println("User found: " + user.getEmail());
                        return User.builder()
                                .username(user.getEmail())
                                .password(user.getPassword())
                                .roles("USER")
                                .build();
                    })

                    .orElseThrow(() -> {
                        System.out.println("User Not Found: " + email);
                        return new UsernameNotFoundException("User Not Found");
                    });
        };
    }



    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

}
//package com.example.demo.repository;

package com.atypon.authentication.repository;
import com.atypon.authentication.models.User;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

@Repository
public interface UserRepository extends JpaRepository<User, Long> {



    Optional<User> findByEmail(String email);

    boolean existsByEmail(String email);

    boolean findByUserIdentifier(String userIdentifier);

    boolean existsByUserIdentifier(String userIdentifier);
}
//package com.example.demo.config;

package com.atypon.authentication.config;

import com.atypon.authentication.models.User;
import com.atypon.authentication.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.boot.CommandLineRunner;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
@RequiredArgsConstructor
public class UsersConfig {

    private final UserRepository userRepository;
    @Bean
    CommandLineRunner commandLineRunner() {
        return args -> {
//            User user = User.builder().email("admin@gmail.com").password("123")
//                    .firstName("faisal").lastName("abdo").username("SISI").build();
//
//            User user1 = User.builder().email("123@gmail.com").password("123")
//                    .firstName("momo").lastName("abdo").username("fafa").build();

            User user2 = new User();
            user2.setEmail("admin@gmail.com");
            user2.setPassword("123");
            user2.setFirstName("momo");
            user2.setLastName("abdo");
            user2.setUserIdentifier("fafa");

//            userRepository.save(user2);
//            userRepository.save(user1);

        };
    }
}
//package com.example.demo.config;
package com.atypon.authentication.config;
import org.springframework.boot.web.servlet.FilterRegistrationBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import org.springframework.web.filter.CorsFilter;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;

import java.util.Arrays;

@Configuration
@EnableWebMvc
public class CorsConfig {
    @Bean
    public FilterRegistrationBean<CorsFilter> corsFilter() {
        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        CorsConfiguration config = new CorsConfiguration();

        config.setAllowCredentials(true);
        config.setAllowedOrigins(Arrays.asList("http://localhost:3000"));
        config.setAllowedHeaders(Arrays.asList(
                HttpHeaders.AUTHORIZATION,
                HttpHeaders.CONTENT_TYPE,
                HttpHeaders.ACCEPT
        ));
        config.setAllowedMethods(Arrays.asList(
                HttpMethod.GET.name(),
                HttpMethod.POST.name(),
                HttpMethod.PUT.name(),
                HttpMethod.PATCH.name(),
                HttpMethod.DELETE.name()
        ));
        config.setMaxAge(3600L); // 1 hour

        source.registerCorsConfiguration("/**", config);

        FilterRegistrationBean<CorsFilter> registrationBean = new FilterRegistrationBean<>(new CorsFilter(source));
        registrationBean.setOrder(-102);

        return registrationBean;
    }
}
//package com.example.demo.auth;
package com.atypon.authentication.auth;
import com.atypon.authentication.dtos.AuthenticationRequest;
import com.atypon.authentication.dtos.AuthenticationResponse;
import com.atypon.authentication.dtos.RegisterRequest;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/api/auth")
@RequiredArgsConstructor
public class AuthController {

    private final AuthService authService;

    @PostMapping("/register")
    public ResponseEntity<AuthenticationResponse> register(
            @RequestBody RegisterRequest registerRequest
    ) {
        return ResponseEntity.ok(authService.register(registerRequest));
    }

    @PostMapping("/authenticate")
    public ResponseEntity<AuthenticationResponse> authenticate(
            @RequestBody AuthenticationRequest authenticationRequest
    ) {
        return ResponseEntity.ok(authService.authenticate(authenticationRequest));
    }
}//package com.example.demo.auth;

package com.atypon.authentication.auth;
import com.atypon.authentication.dtos.AuthenticationRequest;
import com.atypon.authentication.dtos.AuthenticationResponse;
import com.atypon.authentication.dtos.RegisterRequest;
import com.atypon.authentication.models.User;
import com.atypon.authentication.repository.UserRepository;
import com.atypon.authentication.serucity.jwt.JwtService;
import lombok.RequiredArgsConstructor;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

@Service
@RequiredArgsConstructor
public class AuthService {

    private final PasswordEncoder passwordEncoder;
    private final JwtService jwtService;
    private final AuthenticationManager authenticationManager;
    private final UserRepository userRepository;

    public Map<String ,Object> getClaims(User user){
        Map<String, Object> claims = new HashMap<>();
        claims.put("id", user.getId());

        return claims;
    }
    public AuthenticationResponse authenticate(AuthenticationRequest request) {

        System.out.println("@@@@@1");
        authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(request.getEmail(), request.getPassword())
        );
        System.out.println("@@@@@2");

        User user = findUserByUsername(request.getEmail());

        String jwt = jwtService.generateToken(getClaims(user),user);
        System.out.println("@@@@@3");

        return AuthenticationResponse.builder().token(jwt).build();
//        return new AuthenticationResponse.AuthenticationResponseBuilder().token(jwt).build();
    }

    public AuthenticationResponse register(RegisterRequest request) {
        System.out.println("@@@@@@1");
        if (request.getUserIdentifier() == null || request.getPassword() == null) {
            throw new IllegalArgumentException("Invalid request");
        }
        System.out.println("@@@@@2");
        if (checkEmailExists(request.getEmail())) {
            throw new IllegalStateException("Email already exists");
        }

        System.out.println("@@@@@3");


        User buildUser = User.builder().firstName(request.getFirstName())
                .lastName(request.getLastName())
                .password(passwordEncoder.encode(request.getPassword()))
                .userIdentifier(request.getUserIdentifier())
                .email(request.getEmail()).build();

        userRepository.save(buildUser);



        User user = findUserByUsername(request.getEmail());
        String jwt = jwtService.generateToken(getClaims(user),user);
        System.out.println("@@@@@4");
        System.out.println(jwt);

        return AuthenticationResponse.builder().token(jwt).build();
//        return new AuthenticationResponse.AuthenticationResponseBuilder().token(jwt).build();

    }
    private User findUserByUsername(String username) {
        Optional<User> user = userRepository.findByEmail(username);
        if (user.isEmpty()) {
            throw new IllegalArgumentException("Invalid username or password");
        }
        return user.get();
    }

    private boolean checkEmailExists(String email) {
        System.out.println("emailemailemail: " + email);
        return userRepository.existsByEmail(email);
    }

}
//package com.example.demo.models;
package com.atypon.authentication.models;
import jakarta.persistence.*;
import lombok.*;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import java.util.Collection;
import java.util.List;

@Table
@Entity
@Setter
@Getter
@ToString
@EqualsAndHashCode
@AllArgsConstructor
@NoArgsConstructor
@Builder
public class User implements UserDetails {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String firstName;
    private String lastName;
    private String userIdentifier;

    @Column(unique = true)
    private String email;

    private String password;

    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        return List.of(new SimpleGrantedAuthority("ROLE_USER"));
    }



    @Override
    public String getUsername() {
        return email;
    }

    public User(String firstName, String lastName, String username, String email, String password) {
        this.firstName = firstName;
        this.lastName = lastName;
        this.userIdentifier = username;
        this.email = email;
        this.password = password;
    }


}
//package com.example.demo.controller;

package com.atypon.authentication.controller;
import com.atypon.authentication.dtos.AuthenticationRequest;
import com.atypon.authentication.dtos.AuthenticationResponse;
import com.atypon.authentication.dtos.TokenValidationRequest;
import com.atypon.authentication.dtos.TokenValidationResponse;
import com.atypon.authentication.serucity.jwt.JwtService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/jwt")
@RequiredArgsConstructor
@CrossOrigin(origins =
        "http://localhost:3000")
public class JwtController {

    private final JwtService jwtService;

//
//    @GetMapping("/isValid")
//    public TokenValidationResponse fetchIdByToken(@RequestParam String token) {
//        System.out.println("JWT token received: " + token);
//
//        if (jwtService.isTokenExpired(token)){
//            return new TokenValidationResponse();
//        }
//        TokenValidationResponse tokenValidationResponse = new TokenValidationResponse();
//        tokenValidationResponse.setUserId(jwtService.extractIdToken(token.substring(7)));
//
//        return tokenValidationResponse;
//    }

    @GetMapping("/isValid")
    public ResponseEntity<TokenValidationResponse> fetchIdByToken
            (@RequestHeader("Authorization") AuthenticationResponse authenticationRequest) {
        try {

            String authHeader = authenticationRequest.getToken();

            String token = authHeader.startsWith("Bearer ") ? authHeader.substring(7) : authHeader;

            System.out.println("JWT token received: " + token);


            if (jwtService.isTokenExpired(token)) {
                return ResponseEntity.ok(new TokenValidationResponse());
            }



            TokenValidationResponse tokenValidationResponse = new TokenValidationResponse();
            tokenValidationResponse.setUserId(jwtService.extractIdToken(token));
            return ResponseEntity.ok(tokenValidationResponse);
        } catch (Exception e) {
            System.err.println("Error processing token: " + e.getMessage());
            return ResponseEntity.status(500).body(new TokenValidationResponse());
        }
    }

}
//package com.example.demo.controller;

package com.atypon.authentication.controller;
import com.atypon.authentication.models.User;
import com.atypon.authentication.service.UserService;
import lombok.NonNull;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.oauth2.core.user.OAuth2User;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

@RestController
@RequestMapping("/api/data")
@RequiredArgsConstructor
public class DataController {

    private final UserService userService;
    @GetMapping("/user-info")
    public User getUserInfo(@RequestHeader("Authorization")  String token) {

        Optional<User> user =  userService.findUser(token);
        if (user.isEmpty())
            throw new IllegalStateException("User not found");

        return user.get();
    }

    @GetMapping("/info")
    public ResponseEntity<? extends Map<String,? extends Object>> getInfo
            (@AuthenticationPrincipal OAuth2User principal) {
        if (principal == null) {
            Map<String, String> error = new HashMap<>();
            error.put("message", "Unauthorized");
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(error);
        }

        return ResponseEntity.ok(principal.getAttributes());

    }
    @PutMapping("/edit-info")
    public void editUserInfo(@RequestHeader("Authorization")  String token,
                             @RequestBody  Map<String, Object> info) {
        userService.updateUserInfo(token, info);
    }


}
//package com.example.demo.Dtos;

package com.atypon.authentication.dtos;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@AllArgsConstructor
@NoArgsConstructor
public class TokenValidationResponse {
    private Long userId;
}
//package com.example.demo.Dtos;

package com.atypon.authentication.dtos;

import lombok.*;

@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class RegisterRequest {
    private String firstName;
    private String lastName;
    private String email;
    private String userIdentifier;
    private String password;

}
//package com.example.demo.Dtos;

package com.atypon.authentication.dtos;
import lombok.*;


@AllArgsConstructor
@NoArgsConstructor
@Builder
@Data
public class AuthenticationResponse {
    private String token;
}
//package com.example.demo.Dtos;
package com.atypon.authentication.dtos;

import lombok.*;


@Builder
@Data
@NoArgsConstructor
@AllArgsConstructor
public class AuthenticationRequest {
    private String email;
    private String password;

}
package com.atypon.authentication.dtos;


import lombok.Data;

@Data
public class TokenValidationRequest {
    private String token;
}
package com.atypon.authentication;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class AuthenticationApplication {

	public static void main(String[] args) {
		SpringApplication.run(AuthenticationApplication.class, args);
	}

}
package com.atypon.authentication.service;
import com.atypon.authentication.models.User;
import com.atypon.authentication.repository.UserRepository;
import com.atypon.authentication.serucity.jwt.JwtService;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Map;
import java.util.Optional;


@Service
@RequiredArgsConstructor
public class UserService {
    final private UserRepository userRepository;
    private final JwtService jwtService;
    public List<User> findAll() {
        return userRepository.findAll();
    }

    public Optional<User> findUser(String token) {
        Long id = getIdToken(token);


        return userRepository.findById(id);
    }

    private Long getIdToken(String token) {
        return jwtService.extractIdToken(token.substring(7));
    }

    public void updateUserInfo(String token, Map<String, Object> info) {
        Long userId = getIdToken(token);
        Optional<User> user = userRepository.findById(userId);

        if (user.isEmpty())
            throw new IllegalStateException("User not found");

        User userInfo = user.get();
        if (info.containsKey("firstName")){
            userInfo.setFirstName(info.get("firstName").toString());
        }
        if (info.containsKey("lastName")){
            userInfo.setLastName(info.get("lastName").toString());
        }
        if (info.containsKey("userIdentifier")){
            userInfo.setUserIdentifier(info.get("userIdentifier").toString());
        }

        userRepository.save(userInfo);

    }

    public void save(User user) {
        userRepository.save(user);
    }
    public boolean findByIdentifier(String identifier) {
        return userRepository.existsByEmail(identifier) || userRepository.existsByUserIdentifier((identifier));
    }

    public Optional<User> findByEmail(String email) {
        return userRepository.findByEmail(email);
    }
}
