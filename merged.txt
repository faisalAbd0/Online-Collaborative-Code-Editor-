package com.atypon.authentication;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class AuthenticationApplicationTests {



}
package com.atypon.authentication.serucity.jwt;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;
import lombok.RequiredArgsConstructor;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Service;

import java.security.Key;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;


@Service
public class JwtService {

    private static final String SECRET = "ed33f0c5b39893b13ff5d4442298c50549c938dea0fc700c2552a78dd4248cbaed900cf03e31b1d561ef6abbf7c8418402c4633342da144191271b2d4fb007812c220f06ea8dda2f5dcf028775a1664c36778e43242a25956462fdf2fc0c760c4fda857c24f1ae0952ba3efc629ecb0414f7a87c3e358f49f91a1cdb0d81ff911c4865c97a7b2981538fae630d071b984ab44ea7fcf86fa4f93ec8cb1be53e963d600d881e0f2e32b361145ac35d81c69945d4baacf1f1260a3fa4c31dc13bd4c99cd96b5fc1f074168899b097e4e9874bfb9d32cd316f76a03d2ad00cfbab6044f9869cd325ae048a97011fecb72465211bb6281929133dd70cf35b608f0f53";

    public String generateToken(UserDetails userDetails) {
        Map<String, Object> claims = new HashMap<>();
        return generateToken(claims, userDetails);
    }

    public boolean isTokenExpired(String token) {
        return extractExpDate(token).before(new Date());
    }

    private Date extractExpDate(String token) {
        return extractClaim(token, Claims::getExpiration);
    }

    public boolean isTokenValid(String token, UserDetails userDetails) {
        String username = extractUsername(token);
        return username.equals(userDetails.getUsername());
    }
    public String extractUsername(String token) {
        return extractClaim(token, Claims::getSubject);
    }

    public <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
        final Claims claims = extractClaims(token);
        return claimsResolver.apply(claims);
    }

    public Long extractIdToken(String token) {
        return extractClaim(token, claims -> claims.get("id", Long.class));
    }

    private Claims extractClaims(String token) {
        return Jwts.parserBuilder()
                .setSigningKey(getSignInKey())
                .build()
                .parseClaimsJws(token)
                .getBody();
    }
    private Key getSignInKey(){
        byte[] keyBytes = Decoders.BASE64.decode(SECRET);
        return Keys.hmacShaKeyFor(keyBytes);
    }



    public String generateToken(
            Map<String, Object> extraClaims,
            UserDetails userDetails
    ) {
        return Jwts.builder()
                .setClaims(extraClaims)
                .setSubject(userDetails.getUsername())
                .setIssuedAt(new Date(System.currentTimeMillis()))
                .setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 24))
                .signWith(getSignInKey(), SignatureAlgorithm.HS256)
                .compact();
    }
}
package com.atypon.authentication.serucity.jwt;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.NonNull;
import lombok.RequiredArgsConstructor;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.web.authentication.WebAuthenticationDetails;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;
import org.springframework.web.filter.OncePerRequestFilter;
import com.atypon.authentication.serucity.jwt.JwtService;
import java.io.IOException;



@Component
@RequiredArgsConstructor
public class JwtAuthFilter extends OncePerRequestFilter {

    private final JwtService jwtService;
    private final UserDetailsService userDetailsService;

//    public JwtAuthFilter(JwtService jwtService, UserDetailsService userDetailsService) {
//        this.jwtService = jwtService;
//        this.userDetailsService = userDetailsService;
//
//    }
    @Override
    protected void doFilterInternal(
            @NonNull HttpServletRequest request,
            @NonNull HttpServletResponse response,
            @NonNull FilterChain filterChain) throws ServletException, IOException {

        final String authorizationHeader = request.getHeader("Authorization");
        final String jwt;
        if (authorizationHeader == null || !authorizationHeader.startsWith("Bearer ")) {
            filterChain.doFilter(request, response);
            return;
        }

        jwt = authorizationHeader.substring(7);
        String username = jwtService.extractUsername(jwt);
        Long userId = jwtService.extractIdToken(jwt);
        if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {
            UserDetails userDetails = this.userDetailsService.loadUserByUsername(username);
            if (jwtService.isTokenValid(jwt,userDetails) && !jwtService.isTokenExpired(jwt)) {
                UsernamePasswordAuthenticationToken authToken =
                        new UsernamePasswordAuthenticationToken(
                                userDetails,
                                userId,
                                userDetails.getAuthorities()
                        );
                authToken.setDetails(
                        new WebAuthenticationDetails(request)
                );
                SecurityContextHolder.getContext().setAuthentication(authToken);


            }
            filterChain.doFilter(request, response);
        }


    }
}
//package com.example.demo.serucity.oauth;
package com.atypon.authentication.serucity.oauth;
import com.atypon.authentication.models.User;
import org.springframework.security.oauth2.core.user.OAuth2User;

import java.util.stream.Stream;

public class GithubStrategy implements LoginStrategy{
    @Override
    public User setInfo(User user, OAuth2User oauth2User) {

        String login = oauth2User.getAttribute("login");
        String fullName = oauth2User.getAttribute("name");

        if (Stream.of(login, fullName).anyMatch(s -> s == null || s.trim().isEmpty())) {
            throw new IllegalArgumentException("Not valid credentials for Google OAuth");
        }
        String email = login + "@github.com";

        user.setEmail(email);
        user.setUserIdentifier(login);
        user.setFirstName(fullName);
        user.setLastName(fullName);
        user.setPassword("Github");

        return user;
    }
}
//package com.example.demo.serucity.oauth;
package com.atypon.authentication.serucity.oauth;
import com.atypon.authentication.models.User;
import org.springframework.security.oauth2.core.user.OAuth2User;

import java.util.stream.Stream;

public class GoogleStrategy implements LoginStrategy{

    @Override
    public User setInfo(User user, OAuth2User oauth2User) {
        String firstName = oauth2User.getAttribute("given_name");
        String lastName = oauth2User.getAttribute("family_name");
        String email = oauth2User.getAttribute("email");
        if (Stream.of(firstName, lastName, email).anyMatch(s -> s == null || s.trim().isEmpty())) {
            throw new IllegalArgumentException("Not valid credentials for Google OAuth");
        }

        String identity = email.substring(0, email.indexOf("@"));
        user.setFirstName(firstName);
        user.setLastName(lastName);
        user.setEmail(email);
        user.setUserIdentifier(identity);
        user.setPassword("Google");
        return user;
    }
}
//package com.example.demo.serucity.oauth;
package com.atypon.authentication.serucity.oauth;

import com.atypon.authentication.models.User;
import com.atypon.authentication.serucity.jwt.JwtService;
import com.atypon.authentication.service.UserService;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;

import org.springframework.security.core.Authentication;
import org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken;
import org.springframework.security.oauth2.core.user.OAuth2User;
import org.springframework.security.web.authentication.AuthenticationSuccessHandler;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.rmi.ServerException;
import java.util.HashMap;
import java.util.Map;



@Component
@RequiredArgsConstructor
public class OAuth2SuccessHandler implements AuthenticationSuccessHandler {
    private final JwtService jwtService;
    private final UserService userService;

    @Override
    public void onAuthenticationSuccess(HttpServletRequest request,
                                   HttpServletResponse response,
                                   Authentication authentication) throws IOException {

        OAuth2AuthenticationToken oAuth2Token = getOAuth2Token(authentication);
        OAuth2User oAuth2User = (OAuth2User) authentication.getPrincipal();

        LoginStrategy loginStrategy = determineStrategy(oAuth2Token.getAuthorizedClientRegistrationId());
        User user = loginStrategy.setInfo(new User(), oAuth2User);

        registerUserIfNotExists(user);
        User userWithId = fetchUserFromDatabase(user.getEmail());

        String token = generateJwtToken(userWithId);
        redirectToClientWithToken(response, token);
    }

    private LoginStrategy determineStrategy(String registrationId) {
        if (registrationId.equalsIgnoreCase("google")) {
            return new GoogleStrategy();
        } else if (registrationId.equalsIgnoreCase("github")) {
            return new GithubStrategy();
        }
        throw new IllegalStateException("Oauth Strategy not provided: " + registrationId);
    }

    private OAuth2AuthenticationToken getOAuth2Token(Authentication authentication) {
        if (!(authentication instanceof OAuth2AuthenticationToken token)) {
            throw new IllegalStateException("Unexpected authentication type: " + authentication);
        }
        return token;
    }

    private void registerUserIfNotExists(User user) {
        if (!userService.findByIdentifier(user.getEmail())) {
            userService.save(user);
        }
    }

    private User fetchUserFromDatabase(String email) throws ServerException {
        return userService.findByEmail(email)
                .orElseThrow(() -> new ServerException("didn't stored in the database"));
    }

    private String generateJwtToken(User user) {
        Map<String, Object> claims = new HashMap<>();
        claims.put("id", user.getId());
        return jwtService.generateToken(claims, user);
    }

    private void redirectToClientWithToken(HttpServletResponse response, String token) throws IOException {
        String redirectUrl = "http://localhost:3000/home?token=" + URLEncoder.encode(token, StandardCharsets.UTF_8);
        response.sendRedirect(redirectUrl);
    }

}
//package com.example.demo.serucity.oauth;
package com.atypon.authentication.serucity.oauth;

import com.atypon.authentication.models.User;
import org.springframework.security.oauth2.core.user.OAuth2User;

public interface LoginStrategy {
    User setInfo(User user , OAuth2User oauth2User);
}
package com.atypon.authentication.serucity.config;

import com.atypon.authentication.serucity.jwt.JwtAuthFilter;
import com.atypon.authentication.serucity.oauth.OAuth2SuccessHandler;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

@EnableWebSecurity
@Configuration
@EnableMethodSecurity
public class SecurityConfig {

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http,
                                                   JwtAuthFilter jwtAuthFilter ,
                                                   OAuth2SuccessHandler auth2SuccessHandler ) throws Exception {

        http
                .csrf(AbstractHttpConfigurer::disable)
                .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
                .authorizeHttpRequests(auth ->  auth
                        .requestMatchers("/api/auth/**", "/api/jwt/**")
                                .permitAll()
                        .anyRequest().authenticated()
                )
                .oauth2Login(oauth ->
                        oauth.successHandler(auth2SuccessHandler))
                .addFilterBefore(jwtAuthFilter, UsernamePasswordAuthenticationFilter.class)
//                .cors(cors->{})
        ;

        return http.build();
    }
}
//package com.example.demo.serucity.config;

package com.atypon.authentication.serucity.config;

import com.atypon.authentication.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@Configuration
@RequiredArgsConstructor
public class AppConfig {


    private final UserRepository userRepo;


    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration authenticationConfiguration) throws Exception {
        return authenticationConfiguration.getAuthenticationManager();
    }
    @Bean
    public AuthenticationProvider authenticationProvider() {
        DaoAuthenticationProvider daoAuthenticationProvider = new DaoAuthenticationProvider();
        daoAuthenticationProvider.setUserDetailsService(userDetailsService());
        daoAuthenticationProvider.setPasswordEncoder(passwordEncoder());
        return daoAuthenticationProvider;
    }


    @Bean
    public UserDetailsService userDetailsService() {
        return email -> {
            System.out.println("Looking for user with email: " + email);

            return userRepo.findByEmail(email)
                    .map(user -> {
                        System.out.println("User found: " + user.getEmail());
                        return User.builder()
                                .username(user.getEmail())
                                .password(user.getPassword())
                                .roles("USER")
                                .build();
                    })

                    .orElseThrow(() -> {
                        System.out.println("User Not Found: " + email);
                        return new UsernameNotFoundException("User Not Found");
                    });
        };
    }



    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

}
//package com.example.demo.repository;

package com.atypon.authentication.repository;
import com.atypon.authentication.models.User;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

@Repository
public interface UserRepository extends JpaRepository<User, Long> {



    Optional<User> findByEmail(String email);

    boolean existsByEmail(String email);

    boolean findByUserIdentifier(String userIdentifier);

    boolean existsByUserIdentifier(String userIdentifier);
}
//package com.example.demo.config;

package com.atypon.authentication.config;

import com.atypon.authentication.models.User;
import com.atypon.authentication.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.boot.CommandLineRunner;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
@RequiredArgsConstructor
public class UsersConfig {

    private final UserRepository userRepository;
    @Bean
    CommandLineRunner commandLineRunner() {
        return args -> {
//            User user = User.builder().email("admin@gmail.com").password("123")
//                    .firstName("faisal").lastName("abdo").username("SISI").build();
//
//            User user1 = User.builder().email("123@gmail.com").password("123")
//                    .firstName("momo").lastName("abdo").username("fafa").build();

            User user2 = new User();
            user2.setEmail("admin@gmail.com");
            user2.setPassword("123");
            user2.setFirstName("momo");
            user2.setLastName("abdo");
            user2.setUserIdentifier("fafa");

//            userRepository.save(user2);
//            userRepository.save(user1);

        };
    }
}
//package com.example.demo.config;
package com.atypon.authentication.config;
import org.springframework.boot.web.servlet.FilterRegistrationBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import org.springframework.web.filter.CorsFilter;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;

import java.util.Arrays;

@Configuration
@EnableWebMvc
public class CorsConfig {
    @Bean
    public FilterRegistrationBean<CorsFilter> corsFilter() {
        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        CorsConfiguration config = new CorsConfiguration();

        config.setAllowCredentials(true);
        config.setAllowedOrigins(Arrays.asList("http://localhost:3000"));
        config.setAllowedHeaders(Arrays.asList(
                HttpHeaders.AUTHORIZATION,
                HttpHeaders.CONTENT_TYPE,
                HttpHeaders.ACCEPT
        ));
        config.setAllowedMethods(Arrays.asList(
                HttpMethod.GET.name(),
                HttpMethod.POST.name(),
                HttpMethod.PUT.name(),
                HttpMethod.PATCH.name(),
                HttpMethod.DELETE.name()
        ));
        config.setMaxAge(3600L); // 1 hour

        source.registerCorsConfiguration("/**", config);

        FilterRegistrationBean<CorsFilter> registrationBean = new FilterRegistrationBean<>(new CorsFilter(source));
        registrationBean.setOrder(-102);

        return registrationBean;
    }
}
//package com.example.demo.auth;
package com.atypon.authentication.auth;
import com.atypon.authentication.dtos.AuthenticationRequest;
import com.atypon.authentication.dtos.AuthenticationResponse;
import com.atypon.authentication.dtos.RegisterRequest;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/api/auth")
@RequiredArgsConstructor
public class AuthController {

    private final AuthService authService;

    @PostMapping("/register")
    public ResponseEntity<AuthenticationResponse> register(
            @RequestBody RegisterRequest registerRequest
    ) {
        return ResponseEntity.ok(authService.register(registerRequest));
    }

    @PostMapping("/authenticate")
    public ResponseEntity<AuthenticationResponse> authenticate(
            @RequestBody AuthenticationRequest authenticationRequest
    ) {
        return ResponseEntity.ok(authService.authenticate(authenticationRequest));
    }
}//package com.example.demo.auth;

package com.atypon.authentication.auth;
import com.atypon.authentication.dtos.AuthenticationRequest;
import com.atypon.authentication.dtos.AuthenticationResponse;
import com.atypon.authentication.dtos.RegisterRequest;
import com.atypon.authentication.models.User;
import com.atypon.authentication.repository.UserRepository;
import com.atypon.authentication.serucity.jwt.JwtService;
import lombok.RequiredArgsConstructor;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

@Service
@RequiredArgsConstructor
public class AuthService {

    private final PasswordEncoder passwordEncoder;
    private final JwtService jwtService;
    private final AuthenticationManager authenticationManager;
    private final UserRepository userRepository;

    public Map<String ,Object> getClaims(User user){
        Map<String, Object> claims = new HashMap<>();
        claims.put("id", user.getId());

        return claims;
    }
    public AuthenticationResponse authenticate(AuthenticationRequest request) {

        System.out.println("@@@@@1");
        authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(request.getEmail(), request.getPassword())
        );
        System.out.println("@@@@@2");

        User user = findUserByUsername(request.getEmail());

        String jwt = jwtService.generateToken(getClaims(user),user);
        System.out.println("@@@@@3");

        return AuthenticationResponse.builder().token(jwt).build();
//        return new AuthenticationResponse.AuthenticationResponseBuilder().token(jwt).build();
    }

    public AuthenticationResponse register(RegisterRequest request) {
        System.out.println("@@@@@@1");
        if (request.getUserIdentifier() == null || request.getPassword() == null) {
            throw new IllegalArgumentException("Invalid request");
        }
        System.out.println("@@@@@2");
        if (checkEmailExists(request.getEmail())) {
            throw new IllegalStateException("Email already exists");
        }

        System.out.println("@@@@@3");


        User buildUser = User.builder().firstName(request.getFirstName())
                .lastName(request.getLastName())
                .password(passwordEncoder.encode(request.getPassword()))
                .userIdentifier(request.getUserIdentifier())
                .email(request.getEmail()).build();

        userRepository.save(buildUser);



        User user = findUserByUsername(request.getEmail());
        String jwt = jwtService.generateToken(getClaims(user),user);
        System.out.println("@@@@@4");
        System.out.println(jwt);

        return AuthenticationResponse.builder().token(jwt).build();
//        return new AuthenticationResponse.AuthenticationResponseBuilder().token(jwt).build();

    }
    private User findUserByUsername(String username) {
        Optional<User> user = userRepository.findByEmail(username);
        if (user.isEmpty()) {
            throw new IllegalArgumentException("Invalid username or password");
        }
        return user.get();
    }

    private boolean checkEmailExists(String email) {
        System.out.println("emailemailemail: " + email);
        return userRepository.existsByEmail(email);
    }

}
//package com.example.demo.models;
package com.atypon.authentication.models;
import jakarta.persistence.*;
import lombok.*;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import java.util.Collection;
import java.util.List;

@Table
@Entity
@Setter
@Getter
@ToString
@EqualsAndHashCode
@AllArgsConstructor
@NoArgsConstructor
@Builder
public class User implements UserDetails {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String firstName;
    private String lastName;
    private String userIdentifier;

    @Column(unique = true)
    private String email;

    private String password;

    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        return List.of(new SimpleGrantedAuthority("ROLE_USER"));
    }



    @Override
    public String getUsername() {
        return email;
    }

    public User(String firstName, String lastName, String username, String email, String password) {
        this.firstName = firstName;
        this.lastName = lastName;
        this.userIdentifier = username;
        this.email = email;
        this.password = password;
    }


}
//package com.example.demo.controller;

package com.atypon.authentication.controller;
import com.atypon.authentication.dtos.AuthenticationRequest;
import com.atypon.authentication.dtos.AuthenticationResponse;
import com.atypon.authentication.dtos.TokenValidationRequest;
import com.atypon.authentication.dtos.TokenValidationResponse;
import com.atypon.authentication.serucity.jwt.JwtService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/jwt")
@RequiredArgsConstructor
@CrossOrigin(origins =
        "http://localhost:3000")
public class JwtController {

    private final JwtService jwtService;

//
//    @GetMapping("/isValid")
//    public TokenValidationResponse fetchIdByToken(@RequestParam String token) {
//        System.out.println("JWT token received: " + token);
//
//        if (jwtService.isTokenExpired(token)){
//            return new TokenValidationResponse();
//        }
//        TokenValidationResponse tokenValidationResponse = new TokenValidationResponse();
//        tokenValidationResponse.setUserId(jwtService.extractIdToken(token.substring(7)));
//
//        return tokenValidationResponse;
//    }

    @GetMapping("/isValid")
    public ResponseEntity<TokenValidationResponse> fetchIdByToken
            (@RequestHeader("Authorization") AuthenticationResponse authenticationRequest) {
        try {

            String authHeader = authenticationRequest.getToken();

            String token = authHeader.startsWith("Bearer ") ? authHeader.substring(7) : authHeader;

            System.out.println("JWT token received: " + token);


            if (jwtService.isTokenExpired(token)) {
                return ResponseEntity.ok(new TokenValidationResponse());
            }



            TokenValidationResponse tokenValidationResponse = new TokenValidationResponse();
            tokenValidationResponse.setUserId(jwtService.extractIdToken(token));
            return ResponseEntity.ok(tokenValidationResponse);
        } catch (Exception e) {
            System.err.println("Error processing token: " + e.getMessage());
            return ResponseEntity.status(500).body(new TokenValidationResponse());
        }
    }

}
//package com.example.demo.controller;

package com.atypon.authentication.controller;
import com.atypon.authentication.models.User;
import com.atypon.authentication.service.UserService;
import lombok.NonNull;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.oauth2.core.user.OAuth2User;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

@RestController
@RequestMapping("/api/data")
@RequiredArgsConstructor
public class DataController {

    private final UserService userService;
    @GetMapping("/user-info")
    public User getUserInfo(@RequestHeader("Authorization")  String token) {

        Optional<User> user =  userService.findUser(token);
        if (user.isEmpty())
            throw new IllegalStateException("User not found");

        return user.get();
    }

    @GetMapping("/info")
    public ResponseEntity<? extends Map<String,? extends Object>> getInfo
            (@AuthenticationPrincipal OAuth2User principal) {
        if (principal == null) {
            Map<String, String> error = new HashMap<>();
            error.put("message", "Unauthorized");
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(error);
        }

        return ResponseEntity.ok(principal.getAttributes());

    }
    @PutMapping("/edit-info")
    public void editUserInfo(@RequestHeader("Authorization")  String token,
                             @RequestBody  Map<String, Object> info) {
        userService.updateUserInfo(token, info);
    }


}
//package com.example.demo.Dtos;

package com.atypon.authentication.dtos;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@AllArgsConstructor
@NoArgsConstructor
public class TokenValidationResponse {
    private Long userId;
}
//package com.example.demo.Dtos;

package com.atypon.authentication.dtos;

import lombok.*;

@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class RegisterRequest {
    private String firstName;
    private String lastName;
    private String email;
    private String userIdentifier;
    private String password;

}
//package com.example.demo.Dtos;

package com.atypon.authentication.dtos;
import lombok.*;


@AllArgsConstructor
@NoArgsConstructor
@Builder
@Data
public class AuthenticationResponse {
    private String token;
}
//package com.example.demo.Dtos;
package com.atypon.authentication.dtos;

import lombok.*;


@Builder
@Data
@NoArgsConstructor
@AllArgsConstructor
public class AuthenticationRequest {
    private String email;
    private String password;

}
package com.atypon.authentication.dtos;


import lombok.Data;

@Data
public class TokenValidationRequest {
    private String token;
}
package com.atypon.authentication;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class AuthenticationApplication {

	public static void main(String[] args) {
		SpringApplication.run(AuthenticationApplication.class, args);
	}

}
package com.atypon.authentication.service;
import com.atypon.authentication.models.User;
import com.atypon.authentication.repository.UserRepository;
import com.atypon.authentication.serucity.jwt.JwtService;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Map;
import java.util.Optional;


@Service
@RequiredArgsConstructor
public class UserService {
    final private UserRepository userRepository;
    private final JwtService jwtService;
    public List<User> findAll() {
        return userRepository.findAll();
    }

    public Optional<User> findUser(String token) {
        Long id = getIdToken(token);


        return userRepository.findById(id);
    }

    private Long getIdToken(String token) {
        return jwtService.extractIdToken(token.substring(7));
    }

    public void updateUserInfo(String token, Map<String, Object> info) {
        Long userId = getIdToken(token);
        Optional<User> user = userRepository.findById(userId);

        if (user.isEmpty())
            throw new IllegalStateException("User not found");

        User userInfo = user.get();
        if (info.containsKey("firstName")){
            userInfo.setFirstName(info.get("firstName").toString());
        }
        if (info.containsKey("lastName")){
            userInfo.setLastName(info.get("lastName").toString());
        }
        if (info.containsKey("userIdentifier")){
            userInfo.setUserIdentifier(info.get("userIdentifier").toString());
        }

        userRepository.save(userInfo);

    }

    public void save(User user) {
        userRepository.save(user);
    }
    public boolean findByIdentifier(String identifier) {
        return userRepository.existsByEmail(identifier) || userRepository.existsByUserIdentifier((identifier));
    }

    public Optional<User> findByEmail(String email) {
        return userRepository.findByEmail(email);
    }
}
package com.example.codeService;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class CodeServiceApplicationTests {

}
package com.example.codeService;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class CodeServiceApplication {

	public static void main(String[] args) {
		SpringApplication.run(CodeServiceApplication.class, args);
	}

}
package com.example.codeService.config;

import org.springframework.boot.web.servlet.FilterRegistrationBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import org.springframework.web.filter.CorsFilter;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;

import java.util.Arrays;

@Configuration
@EnableWebMvc
public class CorsConfig {
    @Bean
    public FilterRegistrationBean<CorsFilter> corsFilter() {
        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        CorsConfiguration config = new CorsConfiguration();

        config.setAllowCredentials(true);
        config.setAllowedOrigins(Arrays.asList("http://localhost:3000"));
        config.setAllowedHeaders(Arrays.asList(
                HttpHeaders.AUTHORIZATION,
                HttpHeaders.CONTENT_TYPE,
                HttpHeaders.ACCEPT
        ));
        config.setAllowedMethods(Arrays.asList(
                HttpMethod.GET.name(),
                HttpMethod.POST.name(),
                HttpMethod.PUT.name(),
                HttpMethod.PATCH.name(),
                HttpMethod.DELETE.name()
        ));
        config.setMaxAge(3600L); // 1 hour

        source.registerCorsConfiguration("/**", config);

        FilterRegistrationBean<CorsFilter> registrationBean = new FilterRegistrationBean<>(new CorsFilter(source));
        registrationBean.setOrder(-102);

        return registrationBean;
    }
}
//package com.example.codeService.controller;
//
//
//import com.example.codeService.Dtos.CodeRequest;
//import com.example.codeService.service.CodeExecutionService;
//import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.web.bind.annotation.PostMapping;
//import org.springframework.web.bind.annotation.RequestBody;
//import org.springframework.web.bind.annotation.RequestMapping;
//import org.springframework.web.bind.annotation.RestController;
//
//import java.io.IOException;
//
//@RestController
//@RequestMapping("/api/code")
//public class CodeExecutionController {
//    @Autowired
//    private CodeExecutionService codeExecutionService;
//
//    @PostMapping("/execute")
//    public String executeCode(@RequestBody CodeRequest request) {
//        try {
//            return codeExecutionService.executeCode(request.getCode(), request.getLanguage());
//
//        } catch (IOException e) {
//            return "Error executing code: " + e.getMessage();
//        }
//    }
//
//
//}
//
//
package com.example.codeService.controller;

import com.example.codeService.Dtos.CodeRequest;
import com.example.codeService.Dtos.MultiFileCodeRequest;
import com.example.codeService.service.CodeExecutionService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.io.IOException;

@RestController
@RequestMapping("/api/code")
public class CodeExecutionController {
    @Autowired
    private CodeExecutionService codeExecutionService;

    @PostMapping("/execute")
    public String executeCode(@RequestBody CodeRequest request) {
        try {
            return codeExecutionService.executeCode(request.getCode(), request.getLanguage());
        } catch (IOException e) {
            return "Error executing code: " + e.getMessage();
        }
    }

    @PostMapping("/execute-project")
    public String executeMultiFileProject(@RequestBody MultiFileCodeRequest request) {
        try {
            return codeExecutionService.executeMultiFileProject(request.getFiles(), request.getLanguage());
        } catch (IOException e) {
            return "Error executing project: " + e.getMessage();
        }
    }
}package com.example.codeService.Dtos;

import lombok.*;


@AllArgsConstructor
@NoArgsConstructor
@Data
public class CodeRequest {
    private String code;
    private String language;
}package com.example.codeService.Dtos;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.Map;

@AllArgsConstructor
@NoArgsConstructor
@Data
public class MultiFileCodeRequest {
    private Map<String, String> files; // filename -> content
    private String language;
}package com.example.codeService.service;

import org.springframework.stereotype.Service;

import java.io.*;
import java.util.List;
import java.util.Map;

@Service
public class CodeExecutionService {
    public String executeCode(String code, String language) throws IOException {
        String result;

        String filename = "code." + getFileExtension(language);
        File file = new File("/app/exec/" + filename);
        try (FileWriter writer = new FileWriter(file)) {
            writer.write(code);
        }

        List<String> dockerCommand = getDockerCommand(language, filename);
        System.out.println("DockerCommand: " + dockerCommand);

        ProcessBuilder processBuilder = new ProcessBuilder(dockerCommand);
        processBuilder.redirectErrorStream(true);

        Process process = processBuilder.start();
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {
            StringBuilder output = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                output.append(line).append("\n");
            }
            result = output.toString();
        }

        file.delete();
        return result;
    }


    private String getFileExtension(String language) {
        switch (language) {
            case "java": return "java";
            case "python": return "py";
            case "c": return "c";
            case "cpp": return "cpp";
            default: throw new IllegalArgumentException("Unsupported language");
        }
    }

    private List<String> getDockerCommand(String language, String filename) {
        String volumeMount = "/tmp/exec:/app/exec";

        switch (language) {
            case "java":
                return List.of(
                        "docker", "run", "--rm", "-v", volumeMount, "openjdk",
                        "sh", "-c",
                        "javac /app/exec/" + filename + " && java -cp /app/exec Main; rm -f /app/exec/Main.class"
                );
            case "python":
                return List.of(
                        "docker", "run", "--rm", "-v", volumeMount, "python",
                        "python", "/app/exec/" + filename
                );
            case "c":
                return List.of(
                        "docker", "run", "--rm", "-v", volumeMount, "gcc",
                        "sh", "-c",
                        "gcc /app/exec/" + filename + " -o /app/exec/a.out && /app/exec/a.out; rm -f /app/exec/a.out"
                );
            case "cpp":
                return List.of(
                        "docker", "run", "--rm", "-v", volumeMount, "gcc",
                        "sh", "-c",
                        "g++ /app/exec/" + filename + " -o /app/exec/a.out && /app/exec/a.out; rm -f /app/exec/a.out"
                );
            default:
                throw new IllegalArgumentException("Unsupported language");
        }
    }


    public String executeMultiFileProject(Map<String, String> files, String language) throws IOException {
        String result;
        String execDir = "/app/exec/project_" + System.currentTimeMillis();
        File projectDir = new File(execDir);
        projectDir.mkdirs();

        // Write all files to the project directory
        for (Map.Entry<String, String> entry : files.entrySet()) {
            File file = new File(projectDir, entry.getKey());
            try (FileWriter writer = new FileWriter(file)) {
                writer.write(entry.getValue());
            }
        }

        // Determine main file name based on language
        String mainFileName = determineMainFile(files.keySet(), language);
        if (mainFileName == null) {
            return "Error: Could not determine main file for execution";
        }

        List<String> dockerCommand = getMultiFileDockerCommand(language, execDir, mainFileName);
        System.out.println("DockerCommand: " + dockerCommand);

        ProcessBuilder processBuilder = new ProcessBuilder(dockerCommand);
        processBuilder.redirectErrorStream(true);

        Process process = processBuilder.start();
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {
            StringBuilder output = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                output.append(line).append("\n");
            }
            result = output.toString();
        }

        // Clean up
        deleteDirectory(projectDir);
        return result;
    }

    private String determineMainFile(java.util.Set<String> filenames, String language) {
        // Default heuristic: look for files that might contain main methods or entry points
        switch (language) {
            case "java":
                // Look for a file with "Main" in the name
                for (String filename : filenames) {
                    if (filename.contains("Main") && filename.endsWith(".java")) {
                        return filename;
                    }
                }
                // If no Main file found, just use the first Java file
                for (String filename : filenames) {
                    if (filename.endsWith(".java")) {
                        return filename;
                    }
                }
                break;
            case "python":
                // Look for a file with "main" in the name
                for (String filename : filenames) {
                    if (filename.contains("main") && filename.endsWith(".py")) {
                        return filename;
                    }
                }
                // If no main file found, just use the first Python file
                for (String filename : filenames) {
                    if (filename.endsWith(".py")) {
                        return filename;
                    }
                }
                break;
            case "c":
            case "cpp":
                // Look for a file with "main" in the name
                for (String filename : filenames) {
                    if (filename.contains("main") &&
                            (filename.endsWith(".c") || filename.endsWith(".cpp"))) {
                        return filename;
                    }
                }
                // If no main file found, just use the first C/C++ file
                for (String filename : filenames) {
                    if (filename.endsWith(".c") || filename.endsWith(".cpp")) {
                        return filename;
                    }
                }
                break;
        }
        return null;
    }

    private void deleteDirectory(File directory) {
        if (directory.exists()) {
            File[] files = directory.listFiles();
            if (files != null) {
                for (File file : files) {
                    if (file.isDirectory()) {
                        deleteDirectory(file);
                    } else {
                        file.delete();
                    }
                }
            }
            directory.delete();
        }
    }


    private List<String> getMultiFileDockerCommand(String language, String projectDir, String mainFileName) {
        String relativeProjectPath = projectDir.substring(projectDir.lastIndexOf("/") + 1);
        String volumeMount = "/tmp/exec:/app/exec";

        switch (language) {
            case "java":
                return List.of(
                        "docker", "run", "--rm", "-v", volumeMount, "openjdk",
                        "sh", "-c",
                        "cd /app/exec/" + relativeProjectPath + " && " +
                                "javac *.java && " +
                                "java -cp . " + mainFileName.replace(".java", "") + "; " +
                                "rm -f *.class"
                );
            case "python":
                return List.of(
                        "docker", "run", "--rm", "-v", volumeMount, "python",
                        "sh", "-c",
                        "cd /app/exec/" + relativeProjectPath + " && " +
                                "python " + mainFileName
                );
            case "c":
                return List.of(
                        "docker", "run", "--rm", "-v", volumeMount, "gcc",
                        "sh", "-c",
                        "cd /app/exec/" + relativeProjectPath + " && " +
                                "gcc *.c -o a.out && ./a.out; rm -f a.out"
                );
            case "cpp":
                return List.of(
                        "docker", "run", "--rm", "-v", volumeMount, "gcc",
                        "sh", "-c",
                        "cd /app/exec/" + relativeProjectPath + " && " +
                                "g++ *.cpp -o a.out && ./a.out; rm -f a.out"
                );
            default:
                throw new IllegalArgumentException("Unsupported language");
        }
    }
}package com.example.projects;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class ProjectsApplicationTests {


}
package com.example.projects.dto;


import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@AllArgsConstructor
@NoArgsConstructor
public class TokenValidationResponse {
    private Long userId;
}
package com.example.projects.dto;

import lombok.Data;

@Data
public class CodeEditMessage {
    private String projectId;
    private String filename;
    private String content;
    private Long userId;
    private String timestamp;
}
package com.example.projects.dto;


import lombok.Data;

@Data
public class TokenValidationRequest {
    private String token;
}
package com.example.projects.repository;

import com.example.projects.models.CodeProject;
import org.springframework.data.jpa.repository.JpaRepository;


import java.util.List;
import java.util.Optional;

public interface CodeFileRepository
        extends JpaRepository<CodeProject, Long> {

    Optional<CodeProject> findByUserId(Long userId);
    Optional<List<CodeProject>> findAllByUserId(Long userId);
}
package com.example.projects.websocket;

import com.example.projects.dto.CodeEditMessage;
import lombok.RequiredArgsConstructor;
import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.handler.annotation.SendTo;
import org.springframework.stereotype.Controller;

@Controller
@RequiredArgsConstructor
public class CodeEditController {

    @MessageMapping("/edit") // client sends to /app/edit
    @SendTo("/topic/updates") // server broadcasts to /topic/updates
    public CodeEditMessage broadcastChange(CodeEditMessage message) {
        System.out.println("Received edit: " + message);
        return message; // Automatically broadcast to all subscribers
    }
}
package com.example.projects.config;

import org.springframework.context.annotation.Configuration;
import org.springframework.messaging.simp.config.MessageBrokerRegistry;
import org.springframework.web.socket.config.annotation.*;

@Configuration
@EnableWebSocketMessageBroker
public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {

    @Override
    public void configureMessageBroker(MessageBrokerRegistry config) {
        config.enableSimpleBroker("/topic"); // For broadcasting
        config.setApplicationDestinationPrefixes("/app"); // For sending
    }

    @Override
    public void registerStompEndpoints(StompEndpointRegistry registry) {
        registry.addEndpoint("/ws") // WebSocket endpoint
                .setAllowedOriginPatterns("*")
                .withSockJS(); // Use SockJS fallback
    }
}
package com.example.projects.config;

import com.example.projects.models.CodeProject;
import com.example.projects.models.Language;
import com.example.projects.repository.CodeFileRepository;
import org.springframework.boot.CommandLineRunner;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.MediaType;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.web.client.RestTemplate;

import java.time.LocalDateTime;
import java.util.Arrays;

@Configuration
public class AppConfig {

    @Bean
    CommandLineRunner commandLineRunner(CodeFileRepository codeFileRepository) {
        return args -> {
            // Only run this if the database is empty
            if (codeFileRepository.count() == 0) {
                CodeProject codeFile = new CodeProject(
                        "CodeEditor",
                        "Java",
                        Language.Java,
                        LocalDateTime.now(),
                        1L
                );
                CodeProject codeFile1 = new CodeProject(
                        "ML AI",
                        "Python",
                        Language.Python,
                        LocalDateTime.now(),
                        1L
                );

                CodeProject codeFile2 = new CodeProject(
                        "CodeEditor",
                        "Java",
                        Language.Java,
                        LocalDateTime.now(),
                        2L
                );
                CodeProject codeFile3 = new CodeProject(
                        "ML AI",
                        "Python",
                        Language.Python,
                        LocalDateTime.now(),
                        2L
                );

                CodeProject codeFile4 = new CodeProject(
                        "CodeEditor",
                        "Java",
                        Language.Java,
                        LocalDateTime.now(),
                        3L
                );
                CodeProject codeFile5 = new CodeProject(
                        "ML AI",
                        "Python",
                        Language.Python,
                        LocalDateTime.now(),
                        3L
                );

                codeFileRepository.save(codeFile);
                codeFileRepository.save(codeFile1);
                codeFileRepository.save(codeFile2);
                codeFileRepository.save(codeFile3);
                codeFileRepository.save(codeFile4);
                codeFileRepository.save(codeFile5);
            }
        };
    }

    @Bean
    RestTemplate restTemplate() {
//        return new RestTemplate();

        RestTemplate restTemplate = new RestTemplate();
        MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();
        converter.setSupportedMediaTypes(Arrays.asList(MediaType.APPLICATION_JSON, MediaType.TEXT_HTML));
        restTemplate.getMessageConverters().add(converter);
        return restTemplate;

    }
}package com.example.projects.config;


import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;
import org.springframework.boot.web.servlet.FilterRegistrationBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import org.springframework.web.filter.CorsFilter;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;

import java.util.Arrays;


@EnableWebMvc
@Configuration
public class CorsConfig {

    @Bean
    public FilterRegistrationBean<CorsFilter> corsFilter() {
        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        CorsConfiguration config = new CorsConfiguration();

        config.setAllowCredentials(true);
        config.setAllowedOrigins(Arrays.asList("http://localhost:3000"));
        config.setAllowedHeaders(Arrays.asList(
                HttpHeaders.AUTHORIZATION,
                HttpHeaders.CONTENT_TYPE,
                HttpHeaders.ACCEPT
        ));
        config.setAllowedMethods(Arrays.asList(
                HttpMethod.GET.name(),
                HttpMethod.POST.name(),
                HttpMethod.PUT.name(),
                HttpMethod.PATCH.name(),
                HttpMethod.DELETE.name()
        ));
        config.setMaxAge(3600L); // 1 hour

        source.registerCorsConfiguration("/**", config);

        FilterRegistrationBean<CorsFilter> registrationBean = new FilterRegistrationBean<>(new CorsFilter(source));
        registrationBean.setOrder(-102);

        return registrationBean;
    }
}

package com.example.projects.models;

import jakarta.persistence.*;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.RequiredArgsConstructor;
import lombok.ToString;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

@Data
@Entity
@Table(name = "code_projects")
@NoArgsConstructor
@ToString
public class CodeProject {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String projectName;
    private String description;

    @Enumerated(EnumType.STRING)
    private Language language;

    private LocalDateTime createdAt;

    private Long userId;

    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)
    @JoinColumn(name = "project_id")
    private List<CodeFile> files = new ArrayList<>();

    public CodeProject(String projectName, String description, Language language,
                       LocalDateTime createdAt, Long userId) {
        this.projectName = projectName;
        this.description = description;
        this.language = language;
        this.createdAt = createdAt;
        this.userId = userId;
    }

    public CodeProject(String projectName, String description, Language language,
                       Long userId) {
        this.projectName = projectName;
        this.description = description;
        this.language = language;
        this.userId = userId;
    }

    public void addFile(CodeFile file) {
        if (files == null) {
            files = new ArrayList<>();
        }
        files.add(file);
    }
}package com.example.projects.models;

import jakarta.persistence.Embeddable;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;

@Data
@AllArgsConstructor
@NoArgsConstructor
@Embeddable
public class CodeVersion {
    private String content;
    private String editedBy; // or Long userId
    private LocalDateTime timestamp;
    private String message; // Optional: "Initial version", "Updated after fix", etc.
}
package com.example.projects.models;

public enum Language {
    Python,
    Java,
    Cpp,
    C
}
package com.example.projects.models;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.ToString;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@ToString
@Table(name = "code_files")
public class CodeFile {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String filename;

    @Column(columnDefinition = "TEXT")
    private String content;

    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;

    @ElementCollection
    private List<CodeVersion> history = new ArrayList<>();

    public CodeFile(String filename, String content) {
        this.filename = filename;
        this.content = content;
        this.createdAt = LocalDateTime.now();
        this.updatedAt = LocalDateTime.now();
    }

    public void addVersion(String userId) {
        if (history == null) {
            history = new ArrayList<>();
        }
        history.add(new CodeVersion(content, userId, LocalDateTime.now(), "Auto snapshot"));
    }

}package com.example.projects.controller;

import com.example.projects.dto.TokenValidationRequest;
import com.example.projects.dto.TokenValidationResponse;
import com.example.projects.models.CodeFile;
import com.example.projects.models.CodeProject;
import com.example.projects.models.CodeVersion;
import com.example.projects.service.CodeFileService;
import com.fasterxml.jackson.core.JsonProcessingException;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@RestController
@RequestMapping("/api/code-file")
@RequiredArgsConstructor
@CrossOrigin
        (origins =
        "http://localhost:3000")
public class CodeFileController {
    final CodeFileService codeFileService;
    private final JwtApiService jwtApiService;



    @PostMapping("/user-projects")
    public List<CodeProject> findProjectsByToken(
            @RequestBody TokenValidationResponse tokenValidationResponse
    ) {

        Long userId = tokenValidationResponse.getUserId();
        System.out.println(">>>>>>>");
        System.out.println(userId);
        System.out.println("<<<<<<<");
        Optional<List<CodeProject>> code = codeFileService.findUserProject(userId);
        if (code.isEmpty()) {
            return new ArrayList<>();
        }
        return code.get();
    }

    @GetMapping("/project/{id}")
    public ResponseEntity<CodeProject> findProjectById(
            @PathVariable String id
    ){
        Optional<CodeProject> project =codeFileService.findById(id);
        if (project.isEmpty()) {
            return ResponseEntity.notFound().build();
        }
        return ResponseEntity.ok(project.get());
    }
    @PostMapping("/save")
    public ResponseEntity<CodeProject> save(@RequestBody CodeProject codeProject) {
        // Ensure we have a created date
        if (codeProject.getCreatedAt() == null) {
            codeProject.setCreatedAt(java.time.LocalDateTime.now());
        }

        CodeProject savedProject = codeFileService.save(codeProject);
        return ResponseEntity.ok(savedProject);
    }

    @PostMapping("/{projectId}/files")
    public ResponseEntity<CodeProject> addFile(
            @PathVariable String projectId,
            @RequestBody CodeFile file) {
        System.out.println(projectId);
        System.out.println(file);
        return codeFileService.addFileToProject(projectId, file)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    @PutMapping("/{projectId}/files/{filename}")
    public ResponseEntity<CodeProject> updateFile(
            @PathVariable String projectId,
            @PathVariable String filename,
            @RequestBody Map<String, String> update
    ) {


        String content = update.get("content");
        String userId = update.get("userId"); // 👈 userId is passed directly from the frontend

        System.out.println("Updating file for userId: " + userId);
        System.out.println("The content is: " + content);
        return codeFileService.updateFile(projectId, filename, content, userId)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }


    @DeleteMapping("/{projectId}/files/{filename}")
    public ResponseEntity<Void> deleteFile(
            @PathVariable String projectId,
            @PathVariable String filename) {
        boolean deleted = codeFileService.deleteFile(projectId, filename);
        return deleted ? ResponseEntity.ok().build() : ResponseEntity.notFound().build();
    }


    @GetMapping("/{projectId}/files/{filename}/history")
    public ResponseEntity<List<CodeVersion>> getFileHistory(
            @PathVariable String projectId,
            @PathVariable String filename
    ) {
        Optional<CodeProject> projectOpt = codeFileService.findById(projectId);
        if (projectOpt.isPresent()) {
            for (CodeFile file : projectOpt.get().getFiles()) {
                if (file.getFilename().equals(filename)) {
                    return ResponseEntity.ok(file.getHistory());
                }
            }
        }
        return ResponseEntity.notFound().build();
    }

    public Long getId(String authHeader) {
        return jwtApiService.callJwtApi(authHeader);
    }

}package com.example.projects.controller;

import com.example.projects.dto.TokenValidationResponse;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

@Service
@RequiredArgsConstructor
@RestController
public class JwtApiService {

    private final RestTemplate restTemplate;

    public Long callJwtApi(String token) {
        HttpHeaders headers = new HttpHeaders();
//        headers.setBearerAuth(token); // OR .set("Authorization", "Bearer " + token);
        HttpEntity<TokenValidationResponse> entity = new HttpEntity<>(headers);

        System.out.println("Calling JWT API");
        ResponseEntity<TokenValidationResponse> response = restTemplate.exchange(
                "http://backend:8080/api/jwt/isValid?token=" + token, // Add token as query param
                HttpMethod.GET,
                entity,
                TokenValidationResponse.class
        );
        System.out.println("Done calling JWT API");
        System.out.println("Resonspe.getStatus(): " + response.getStatusCode());
        System.out.println("Resonspe.getBody(): " + response.getBody());

        return response.getBody().getUserId();

    }


}
/*
@Service
@RequiredArgsConstructor
public class JwtApiService {

    private final RestTemplate restTemplate;

    public String callJwtApi(String token) {
        HttpHeaders headers = new HttpHeaders();
        headers.setBearerAuth(token); // This is correct if you want to send as Authorization header
        HttpEntity<String> entity = new HttpEntity<>(headers);

        System.out.println("Calling JWT API");
        ResponseEntity<String> response = restTemplate.exchange(
                "http://localhost:8080/api/jwt/isValid?token=" + token, // Add token as query param
                HttpMethod.GET,
                entity,
                String.class
        );
        System.out.println("Done calling JWT API");
        System.out.println("Response.getStatus(): " + response.getStatusCode());
        System.out.println("Response.getBody(): " + response.getBody());

        return response.getBody();
    }
}
 */package com.example.projects;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class ProjectsApplication {

	public static void main(String[] args) {
		SpringApplication.run(ProjectsApplication.class, args);
	}

}
//package com.example.projects.service;
//
//import com.example.projects.models.CodeFile;
//import com.example.projects.models.CodeProject;
//import com.example.projects.repository.CodeFileRepository;
//import lombok.RequiredArgsConstructor;
//import org.springframework.stereotype.Service;
//
//import java.time.LocalDateTime;
//import java.util.List;
//import java.util.Optional;
//
//@Service
//@RequiredArgsConstructor
//public class CodeFileService {
//    private final CodeFileRepository codeFileRepository;
//
//    public List<CodeProject> findAll() {
//        return codeFileRepository.findAll();
//    }
//
//    public Optional<CodeProject> findById(String id) {
//        System.out.println(codeFileRepository.findById(id));
//        return codeFileRepository.findById(id);
//    }
//
//    public CodeProject save(CodeProject codeFile) {
//        return codeFileRepository.save(codeFile);
//    }
//
//    public Optional<CodeProject> addFileToProject(String projectId, CodeFile file) {
//        Optional<CodeProject> projectOpt = codeFileRepository.findById(projectId);
//
//        if (projectOpt.isPresent()) {
//            CodeProject project = projectOpt.get();
//
//            // Check if file with same name already exists
//            boolean fileExists = project.getFiles().stream()
//                    .anyMatch(existingFile -> existingFile.getFilename().equals(file.getFilename()));
//
//            if (!fileExists) {
//                // Set creation time
//                if (file.getCreatedAt() == null) {
//                    file.setCreatedAt(LocalDateTime.now());
//                }
//                if (file.getUpdatedAt() == null) {
//                    file.setUpdatedAt(LocalDateTime.now());
//                }
//
//                project.addFile(file);
//                return Optional.of(codeFileRepository.save(project));
//            }
//        }
//
//        return Optional.empty();
//    }
//
//    public Optional<CodeProject> updateFile(String projectId, String filename, String newContent) {
//        Optional<CodeProject> projectOpt = codeFileRepository.findById(projectId);
//
//        if (projectOpt.isPresent()) {
//            CodeProject project = projectOpt.get();
//
//            for (CodeFile file : project.getFiles()) {
//                if (file.getFilename().equals(filename)) {
//                    file.setContent(newContent);
//                    file.setUpdatedAt(LocalDateTime.now());
//                    return Optional.of(codeFileRepository.save(project));
//                }
//            }
//        }
//
//        return Optional.empty();
//    }
//
//    public boolean deleteFile(String projectId, String filename) {
//        Optional<CodeProject> projectOpt = codeFileRepository.findById(projectId);
//
//        if (projectOpt.isPresent()) {
//            CodeProject project = projectOpt.get();
//            boolean removed = project.getFiles().removeIf(file -> file.getFilename().equals(filename));
//
//            if (removed) {
//                codeFileRepository.save(project);
//                return true;
//            }
//        }
//
//        return false;
//    }
//
//    public Optional<List<CodeProject>> findUserProject(Long id) {
//        System.out.println(codeFileRepository.findAllByUserId(id));
//        return codeFileRepository.findAllByUserId(id);
//    }
//}
package com.example.projects.service;

import com.example.projects.models.CodeFile;
import com.example.projects.models.CodeProject;
import com.example.projects.repository.CodeFileRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

@Service
@RequiredArgsConstructor
public class CodeFileService {
    private final CodeFileRepository codeFileRepository;

    public List<CodeProject> findAll() {
        return codeFileRepository.findAll();
    }

    public Optional<CodeProject> findById(String id) {
        try {
            Long longId = Long.parseLong(id);
            return codeFileRepository.findById(longId);
        } catch (NumberFormatException e) {
            return Optional.empty();
        }
    }

    public CodeProject save(CodeProject codeFile) {
        return codeFileRepository.save(codeFile);
    }

    @Transactional
    public Optional<CodeProject> addFileToProject(String projectId, CodeFile file) {
        try {
            Long longId = Long.parseLong(projectId);
            Optional<CodeProject> projectOpt = codeFileRepository.findById(longId);

            if (projectOpt.isPresent()) {
                CodeProject project = projectOpt.get();

                // Check if file with same name already exists
                boolean fileExists = project.getFiles().stream()
                        .anyMatch(existingFile -> existingFile.getFilename().equals(file.getFilename()));

                if (!fileExists) {
                    // Set creation time
                    if (file.getCreatedAt() == null) {
                        file.setCreatedAt(LocalDateTime.now());
                    }
                    if (file.getUpdatedAt() == null) {
                        file.setUpdatedAt(LocalDateTime.now());
                    }

                    project.addFile(file);
                    return Optional.of(codeFileRepository.save(project));
                }
            }
        } catch (NumberFormatException e) {
            return Optional.empty();
        }

        return Optional.empty();
    }

    public Optional<CodeProject> updateFile(String projectId, String filename, String newContent, String userId) {
        try {

            Long longId = Long.parseLong(projectId);
            Optional<CodeProject> projectOpt = codeFileRepository.findById(longId);

            if (projectOpt.isPresent()) {
                CodeProject project = projectOpt.get();

                for (CodeFile file : project.getFiles()) {
                    if (file.getFilename().equals(filename)) {
                        // Save current version before updating
                        System.out.println(">>> userId = " + userId);
                        System.out.println(">>> filename = " + filename);
                        System.out.println(">>> content = " + newContent);
                        System.out.println(">>> file.getContent() = " + file.getContent());
                        System.out.println(">>> is history null? " + (file.getHistory() == null));

                        file.addVersion(userId);

                        // Update content
                        file.setContent(newContent);
                        file.setUpdatedAt(LocalDateTime.now());
                        return Optional.of(codeFileRepository.save(project));
                    }
                }
            }
        } catch (NumberFormatException e) {
            System.out.println("🔥🔥🔥 Error in updateFile:");
            e.printStackTrace();


        }

        return Optional.empty();
    }


    @Transactional
    public boolean deleteFile(String projectId, String filename) {
        try {
            Long longId = Long.parseLong(projectId);
            Optional<CodeProject> projectOpt = codeFileRepository.findById(longId);

            if (projectOpt.isPresent()) {
                CodeProject project = projectOpt.get();
                boolean removed = project.getFiles().removeIf(file -> file.getFilename().equals(filename));

                if (removed) {
                    codeFileRepository.save(project);
                    return true;
                }
            }
        } catch (NumberFormatException e) {
            return false;
        }

        return false;
    }

    public Optional<List<CodeProject>> findUserProject(Long id) {
        return codeFileRepository.findAllByUserId(id);
    }
}