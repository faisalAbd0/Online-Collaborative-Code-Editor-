package com.example.codeService;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class CodeServiceApplicationTests {

}
package com.example.codeService;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class CodeServiceApplication {

	public static void main(String[] args) {
		SpringApplication.run(CodeServiceApplication.class, args);
	}

}
package com.example.codeService.config;

import org.springframework.boot.web.servlet.FilterRegistrationBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import org.springframework.web.filter.CorsFilter;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;

import java.util.Arrays;

@Configuration
@EnableWebMvc
public class CorsConfig {
    @Bean
    public FilterRegistrationBean<CorsFilter> corsFilter() {
        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        CorsConfiguration config = new CorsConfiguration();

        config.setAllowCredentials(true);
        config.setAllowedOrigins(Arrays.asList("http://localhost:3000"));
        config.setAllowedHeaders(Arrays.asList(
                HttpHeaders.AUTHORIZATION,
                HttpHeaders.CONTENT_TYPE,
                HttpHeaders.ACCEPT
        ));
        config.setAllowedMethods(Arrays.asList(
                HttpMethod.GET.name(),
                HttpMethod.POST.name(),
                HttpMethod.PUT.name(),
                HttpMethod.PATCH.name(),
                HttpMethod.DELETE.name()
        ));
        config.setMaxAge(3600L); // 1 hour

        source.registerCorsConfiguration("/**", config);

        FilterRegistrationBean<CorsFilter> registrationBean = new FilterRegistrationBean<>(new CorsFilter(source));
        registrationBean.setOrder(-102);

        return registrationBean;
    }
}
package com.example.codeService.controller;


import com.example.codeService.Dtos.CodeRequest;
import com.example.codeService.service.CodeExecutionService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.io.IOException;

@RestController
@RequestMapping("/api/code")
public class CodeExecutionController {
    @Autowired
    private CodeExecutionService codeExecutionService;

    @PostMapping("/execute")
    public String executeCode(@RequestBody CodeRequest request) {
        try {
            return codeExecutionService.executeCode(request.getCode(), request.getLanguage());

        } catch (IOException e) {
            return "Error executing code: " + e.getMessage();
        }
    }


}


package com.example.codeService.Dtos;

import lombok.*;


@AllArgsConstructor
@NoArgsConstructor
@Data
public class CodeRequest {
    private String code;
    private String language;
}package com.example.codeService.service;

import org.springframework.stereotype.Service;

import java.io.*;
import java.util.List;

@Service
public class CodeExecutionService {
    public String executeCode(String code, String language) throws IOException {
        String result;


        String filename = "code." + getFileExtension(language);
        File file = new File("/app/exec/" + filename);
        try (FileWriter writer = new FileWriter(file)) {
            writer.write(code);
        }


        List<String> dockerCommand = getDockerCommand(language, filename);
        System.out.println("DockerCommand: " + dockerCommand);
        System.out.println("HOT reload");
        ProcessBuilder processBuilder = new ProcessBuilder(dockerCommand);
        processBuilder.redirectErrorStream(true);

        Process process = processBuilder.start();
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {
            StringBuilder output = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                output.append(line).append("\n");
            }
            result = output.toString();
        }

        file.delete();
        return result;
    }

    private String getFileExtension(String language) {
        switch (language) {
            case "java": return "java";
            case "python": return "py";
            case "c": return "c";
            case "cpp": return "cpp";
            default: throw new IllegalArgumentException("Unsupported language");
        }
    }
    private List<String> getDockerCommand(String language, String filename) {
        String volumeMount = "/tmp/exec:/app/exec";
        System.out.println("volumeMount: " + volumeMount);

        switch (language) {
            case "java":
                return List.of(
                        "docker", "run", "--rm", "-v", volumeMount, "openjdk",
                        "sh", "-c",
                        "javac /app/exec/" + filename + " && java -cp /app/exec Main; rm -f /app/exec/Main.class"
                );
            case "python":
                return List.of(
                        "docker", "run", "--rm", "-v", volumeMount, "python",
                        "python", "/app/exec/" + filename
                );
            case "c":
                return List.of(
                        "docker", "run", "--rm", "-v", volumeMount, "gcc",
                        "sh", "-c",
                        "gcc /app/exec/" + filename + " -o /app/exec/a.out && /app/exec/a.out; rm -f /app/exec/a.out"
                );
            case "cpp":
                return List.of(
                        "docker", "run", "--rm", "-v", volumeMount, "gcc",
                        "sh", "-c",
                        "g++ /app/exec/" + filename + " -o /app/exec/a.out && /app/exec/a.out; rm -f /app/exec/a.out"
                );
            default:
                throw new IllegalArgumentException("Unsupported language");
        }
    }

}
